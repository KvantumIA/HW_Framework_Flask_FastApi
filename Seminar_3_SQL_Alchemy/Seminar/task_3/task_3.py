from flask import Flask, render_template
from models import db, Students, Ranked
import random
from datetime import datetime, timedelta

TASK = {
    'Задание №1': 'Создать базу данных для хранения информации о '
                  'студентах университета. База данных должна содержать две '
                  'таблицы: "Студенты" и "Факультеты". В таблице "Студенты" должны'
                  'быть следующие поля: id, имя, фамилия, возраст, пол, группа и'
                  ' id факультета. В таблице "Факультеты" должны быть следующие '
                  'поля: id и название факультета. Необходимо создать связь между '
                  'таблицами "Студенты" и "Факультеты". Написать '
                  'функцию-обработчик, которая будет выводить список всех '
                  'студентов с указанием их факультета.',
    'Задание №2.': 'Создать базу данных для хранения '
                   'информации о книгах в библиотеке. База данных должна '
                   'содержать две таблицы: "Книги" и "Авторы". В таблице '
                   '"Книги" должны быть следующие поля: id, название, год'
                   ' издания, количество экземпляров и id автора. В '
                   'таблице "Авторы" должны быть следующие поля: id, имя'
                   ' и фамилия. Необходимо создать связь между таблицами'
                   ' "Книги" и "Авторы". Написать функцию-обработчик,'
                   ' которая будет выводить список всех книг с указанием'
                   ' их авторов.',
    'Задание №3.': 'Доработаем задача про студентов Создать базу данных для хранения информации о студентах и их оценках в учебном заведении. База данных должна содержать две таблицы: "Студенты" и "Оценки". В таблице "Студенты" должны быть следующие поля: id, имя, фамилия, группа и email. В таблице "Оценки" должны быть следующие поля: id, id студента, название предмета и оценка. Необходимо создать связь между таблицами "Студенты" и "Оценки". Написать функцию-обработчик, которая будет выводить список всех студентов с указанием их оценок.',
    'Задание №4.': 'Создайте форму регистрации пользователя с использованием Flask-WTF. Форма должна содержать следующие поля: ○ Имя пользователя (обязательное поле) ○ Электронная почта (обязательное поле, с валидацией на корректность ввода email) ○ Пароль (обязательное поле, с валидацией на минимальную длину пароля) ○ Подтверждение пароля (обязательное поле, с валидацией на совпадение с паролем) После отправки формы данные должны сохраняться в базе данных (можно использовать SQLite) и выводиться сообщение об успешной регистрации. Если какое-то из обязательных полей не заполнено или данные не прошли валидацию, то должно выводиться соответствующее сообщение об ошибке. Дополнительно: добавьте проверку на уникальность имени пользователя и электронной почты в базе данных. Если такой пользователь уже зарегистрирован, то должно выводиться сообщение об ошибке.',
    'Задание №5.': 'Создать форму регистрации для пользователя. Форма должна содержать поля: имя, электронная почта, пароль (с подтверждением), дата рождения, согласие на обработку персональных данных. Валидация должна проверять, что все поля заполнены корректно (например, дата рождения должна быть в формате дд.мм.гггг). При успешной регистрации пользователь должен быть перенаправлен на страницу подтверждения регистрации. ',
    'Задание №6.': 'Дополняем прошлую задачу Создайте форму для регистрации пользователей в вашем веб-приложении. Форма должна содержать следующие поля: имя пользователя, электронная почта, пароль и подтверждение пароля. Все поля обязательны для заполнения, и электронная почта должна быть валидным адресом. После отправки формы, выведите успешное сообщение об успешной регистрации.',
    'Задание №7.': 'Создайте форму регистрации пользователей в приложении Flask. Форма должна содержать поля: имя, фамилия, email, пароль и подтверждение пароля. При отправке формы данные должны валидироваться на следующие условия: ○ Все поля обязательны для заполнения. n○ Поле email должно быть валидным email адресом. ○ Поле пароль должно содержать не менее 8 символов, включая хотя бы одну букву и одну цифру. ○ Поле подтверждения пароля должно совпадать с полем пароля. ○ Если данные формы не прошли валидацию, на странице должна быть выведена соответствующая ошибка. ○ Если данные формы прошли валидацию, на странице должно быть выведено сообщение об успешной регистрации.',
    'Задание №8.': 'Создать форму для регистрации пользователей на сайте. Форма должна содержать поля "Имя", "Фамилия", "Email", "Пароль" и кнопку "Зарегистрироваться". При отправке формы данные должны сохраняться в базе данных, а пароль должен быть зашифрован.', }

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///../../instance/student_task_3_db.database'

db.init_app(app)


@app.cli.command("init-database")
def init_db():
    db.create_all()
    print('OK')


@app.cli.command("fill-database")
def fill_tables():
    # Добавляем студентов
    count = 5
    for user in range(1, count + 1):
        new_student = Students(first_name=f'Имя_{user}',
                               last_name=f'Фамилия_{user}',
                               group=[1 if user % 2 == 0 else 2][0],
                               email=f'email_{user}@mail.ru')
        db.session.add(new_student)
    db.session.commit()

    name_courses = ['Math', 'History', 'Biology', 'Chemistry', 'Physics']
    rank = [2, 3, 4, 5]
    # Добавляем оценки
    for courses in name_courses:
        for item in range(1, count + 1):
            student = Students.query.filter_by(first_name=f'Имя_{item}').first()
            new_rank_student = Ranked(id_student=student.id,
                                      name=courses,
                                      rank=random.choice(rank))
            db.session.add(new_rank_student)
    db.session.commit()


@app.route('/')
def index():
    return render_template('main.html', tasks=TASK)


@app.route('/data/')
def data():
    return 'Your data!'


@app.route('/students/')
def all_users():
    student = Students.query.all()
    ranked = Ranked.query.all()
    context = {'student': student, 'ranked': ranked,
               'title': 'Все пользователи'}
    return render_template('students.html', **context)


if __name__ == '__main__':
    app.run(debug=True)
